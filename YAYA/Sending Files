#Sending files in Python

#When using Python, it is possible to stransfer files over the internet using sockets, which are part of the socket library that must be imported,
#as well as the os library, which handles file management:
import socket
import os

#Since it is required to get the modification time of a file, the time library must also be imported:
import time

#Before attempting to transfer any file through a TCP connection, certain operations have to be performed:

#Creating a new folder:
os.makedirs(foldername)

#Listing all files in the local directory:
os.listdir(foldername)          #Returns [] if it is an empty folder, argument is optional

#Verifying that the file exists in the local directory:
os.path.isfile(file)

#Getting the size of a file, in bytes:
os.path.getsize(file)

#Getting the file's modification date:
time.strftime('%d.%m.%y', time.gmtime(os.path.getmtime(file)))

#Getting the file's modification time:
time.strftime('%H:%M:%S', time.gmtime(os.path.getmtime(file)))

#Deleting a file:
os.remove(filename)

#Deleting an empty directory:
os.rmdir(foldername)

#Joining folder paths:
os.path.join(begginingOfPath, endOfPath)                                #For example: os.path.join('Files', 'Numbers') = 'Files/Numbers'


#It is going to be assumed that a working Client and Server have already been implemented

#In this example, the client will be the one sending the files, and the Server will receive them

#The Client should start by opening the file that will be sent:
f = open(filename, 'rb')        #The parameter 'rb' specifies that the binary text of the filename will be read

#Since it is not known how many cicles it will take to read the entire file, a while loop should be implemented:
l = f.read(1024)
while (l):
    socket_name.send(l)
    l = f.read(1024)            #Returns nothing if there is nothing else to be read

#The Server should start by creating a new file:
f = open(filename, 'wb')        #The parameter 'wb' specifies that binary text will be written on the created file

#After this, the Server will enter a while loop, which ends once it has received the same ammount of data it was expecting:
l = socket_name.recv(1024)
f.write(l)
bytesReceived += len(l.decode())
while (bytesReceived < bytesExpected):
    l = socket_name.recv(1024)
    f.write(l)
    bytesReceived += len(l.decode())
